"use strict";define("Test/TestPlansHubRefresh/Service",["require","exports","TestPlanCommon/RestClient/Test","TestPlanCommon/RestClient/TestPlan","TestPlanCommon/RestClient/TestPlanExtended","VSS/Core/Util/String","VSS/Platform/Context"],(function(t,e,n,s,i,r,o){var a;a=e.Resources={},e.Resources.StateInProgress="InProgress",e.Resources.Title="{0} (Manual)",e.Resources.TestSettingDescription="Setting created through web access run with options",function(t){e.TestHubDataService={};class c extends o.VssService{constructor(){super(...arguments),this.testSettingsXml='<TestSettings xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><Execution xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><TestTypeSpecific /><AgentRule name="Local"><SelectionCriteria><AgentProperty name="__Test Environment" value="__Placeholder_TestEnvironmentName" /><AgentProperty name="__Machine Role" value="Local" /></SelectionCriteria><DataCollectors></DataCollectors></AgentRule></Execution></TestSettings>'}_serviceStart(t){super._serviceStart(t),this.pageContext=t,this.testPlanClient=(0,s.getTestPlanClient)(t),this.testRunClient=(0,n.getTestClient)(t),this.testPlanExtendedClient=(0,i.getTestPlanExtendedClient)(t)}_serviceRestart(t){super._serviceRestart(t),this.pageContext=t,this.testPlanClient=(0,s.getTestPlanClient)(t),this.testRunClient=(0,n.getTestClient)(t),this.testPlanExtendedClient=(0,i.getTestPlanExtendedClient)(t)}createTestSettings(t){const e={areaPath:t,description:a.TestSettingDescription,isPublic:!1,machineRoles:'<roles><role name="Local" execution= "true"/></roles>',testSettingsContent:this.testSettingsXml,testSettingsName:"None",testSettingsId:-1},n=this._getCurrentProject();return this.testRunClient.createTestSettings(e,n)}createTestRun(t,e,n,s,i,o,c){const l=this.pageContext.getService("IVssPageService").getData();let u="";l&&l.user&&(u=l.user.id);const g={};g.plan={id:t.toString(),name:e,url:""},g.name=(0,r.format)(a.Title,i),g.iteration=n,g.owner={id:u},g.testSettings={id:o.toString(),name:"None",url:""},g.state="InProgress",g.pointIds=s.map((t=>t.id)),g.configurationIds=s.map((t=>t.configuration.id)),g.build=c;const C=this._getCurrentProject();return this.testRunClient.createTestRun(g,C)}openApplicationTestRunner(t,e){const n=this.pageContext.getService("IVssPageService").getData();let s,i="";n&&n.user&&(s=n.isHosted,i=n.hostPath);const r=this._getCurrentProject();return new Promise(((n,o)=>{this.pageContext.getService("ILegacyPlatformService").getLegacyPageContext().then((o=>{if(o&&o.microsoftAjaxConfig&&o.microsoftAjaxConfig.cultureInfo){const a=this._getTestRunnerUri(t,e,s,r,i,o.microsoftAjaxConfig.cultureInfo.name);window.open(a,"_self"),n(!0)}}),o)}))}getTestPlanById(t){const e=this._getCurrentProject();return this.testPlanClient.getTestPlanById(e,t)}getTestSuitesForPlan(t,e,n,s,i){let r=i||this._getCurrentProject();return this.testPlanClient.getTestSuitesForPlan(r,t,e,n,s)}getTestCasesForSuite(t,e,n,s,i,r,o,a,c,l){const u=this._getCurrentProject();return this.testPlanExtendedClient.getTestCaseListWithContinuationToken(u,t,e,n,s,i,r,c,o,a,l)}getTestCases(t,e,n,s,i){const r=this._getCurrentProject();return this.testPlanClient.getTestCase(r,t,e,n.join(","),i,s)}getTestPointsForSuite(t,e,n,s,i,r,o,a){const c=this._getCurrentProject();return this.testPlanExtendedClient.getPointsListWithContinuationToken(c,t,e,n,s,i,r,o,a)}updateTestPoints(t,e,n,s,i){const r=this._getCurrentProject();return this.testPlanClient.updateTestPoints(t,r,e,n,s,i)}addTestCasesToSelectedSuite(t,e,n){const s=this._getCurrentProject();return this.testPlanClient.addTestCasesToSuite(t,s,e,n)}createTestSuite(t,e){const n=this._getCurrentProject();return this.testPlanClient.createTestSuite(t,n,e)}createBulkTestSuites(t,e,n){const s=this._getCurrentProject();return this.testPlanClient.createBulkTestSuites(t,s,e,n)}deleteTestSuite(t,e){const n=this._getCurrentProject();return this.testPlanClient.deleteTestSuite(n,t,e)}updateTestSuite(t,e,n){const s=this._getCurrentProject();return this.testPlanClient.updateTestSuite(t,s,e,n)}reorderSuiteEntries(t,e){const n=this._getCurrentProject();return this.testPlanClient.reorderSuiteEntries(t,n,e)}removeTestCasesFromSuite(t,e,n){const s=this._getCurrentProject();return this.testPlanClient.removeTestCasesListFromSuite(s,t,e,n)}getSuitesByTestCaseId(t){return this.testPlanClient.getSuitesByTestCaseId(t)}fetchTestEntityCount(t,e,n,s,i,r,o){const a=this._getCurrentProject(),c=e&&e.length>0?e.join(","):void 0,l=n&&n.length>0?n.join(","):void 0,u=s&&s.length>0?s.join(","):void 0,g=i&&i.length>0?i.join(","):void 0;return this.testPlanClient.getTestEntityCountByPlanId(a,t,c,r,l,u,g,o)}getCloneInformation(t){const e=this.pageContext.getService("ITfsPageService").getData();if(e&&e.project)return this.testPlanClient.getCloneInformation(e.project.id,t);throw new Error("Unable to get project info from page data, opID:"+t)}cloneTestPlan(t,e,n,s,i){const r=this.pageContext.getService("ITfsPageService").getData();if(r&&r.project){const o={};o.areaPath=n,o.iteration=s,o.project=r.project.name,o.name=e;const a={};a.id=t,a.suiteIds=[t+1];const c={cloneOptions:{cloneRequirements:!1,copyAllSuites:!0,copyAncestorHierarchy:!0},destinationTestPlan:o,sourceTestPlan:a};return this.testPlanClient.cloneTestPlan(c,r.project.id,i)}throw new Error("Unable to get project info from page data")}cloneTestSuite(t,e,n,s,i,r){const o=this.pageContext.getService("ITfsPageService").getData();if(o&&o.project){const a={cloneOptions:{cloneRequirements:!1,copyAllSuites:!0,copyAncestorHierarchy:!1,overrideParameters:{"System.AreaPath":s,"System.IterationPath":i}},destinationTestSuite:{id:n,project:o.project.name},sourceTestSuite:{id:t}};return this.testPlanClient.cloneTestSuite(a,e,r)}throw new Error("Unable to get project info from page data")}cloneTestCases(t,e,n,s,i,r,o,a,c,l,u){const g=this.pageContext.getService("ITfsPageService").getData();if(g&&g.project){const g={cloneOptions:{includeAttachments:u,includeLinks:l},sourceTestPlan:{id:t,name:e},sourceTestSuite:{id:i},destinationTestPlan:{id:n,name:s},destinationTestSuite:{id:r,project:a},testCaseIds:c};return this.testPlanClient.cloneTestCase(g,o)}throw new Error("Unable to get project info from page data")}_getCurrentProject(){const t=this.pageContext.getService("ITfsPageService").getData();let e="";if(t&&t.project)return e=t.project.name,e;throw new Error("Unable to fetch the current project")}_getTestRunnerUri(t,e,n,s,i,o){const a=(0,r.format)("run?runid={0},suiteid={1},protocolversion={2},isHosted={3},locale={4}",t,e,"1.0",n,o);return(0,r.format)("{0}://{1}/{2}/{3}","test-runner",location.origin+i,s,a)}getProjects(t=300){return this.pageContext.getRestClient("ICoreRestClient").getProjects(void 0,t)}getTestPlans(t,e,n,s,i){return this.testPlanExtendedClient.getPlansListWithContinuationToken(t,e,n,s,i)}getSuiteCloneInformation(t,e){const n=this.pageContext.getService("ITfsPageService").getData();if(e)return this.testPlanClient.getSuiteCloneInformation(e,t);if(n&&n.project)return this.testPlanClient.getSuiteCloneInformation(n.project.id,t);throw new Error("Unable to get project info from page data, opID:"+t)}getTestCaseCloneInformation(t,e){const n=this.pageContext.getService("ITfsPageService").getData();if(e)return this.testPlanClient.getTestCaseCloneInformation(e,t);if(n&&n.project)return this.testPlanClient.getTestCaseCloneInformation(n.project.id,t);throw new Error("Unable to get project info from page data, opID:"+t)}}e.TestHubDataService.TestHubDataService=c,o.Services.add("ITestHubDataService",{serviceFactory:c})}()}),["Resources","TestHubDataService"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-test-web.testhub-data-service"}}));