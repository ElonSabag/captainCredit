"use strict";define("Wit/Common/BulkUpdateUtils",["require","exports","Wit/Common/Generated/Constants","Wit/WorkItemModel/WorkItem/FieldUtils"],(function(e,t,i,a){var o,s,l;o=t[l="BulkUpdateInterfaces"]={},(t[l].BulkUpdateConstants||(t[l].BulkUpdateConstants={})).AllTypes="AllTypes",function(e){function o(e){if(!e)return[];const i=e.split(t.TagUtils.TagSplittingSeparator),a=[];for(const e of i){const t=e.trim();t&&a.push(t)}return a}function l(e){return e.join("; ")}s=t.TagUtils={},t.TagUtils.processTagsChanges=function(e,s){const n=e.getFieldById(i.CoreField.Tags);if(n&&(0,a.isEditable)(n)){const a=o(e.getFieldValueById(i.CoreField.Tags)),n=o(s.value),d=s.fieldName===t.TagUtils.AddTagsPseudoRefName?[...new Set([...a,...n]).values()]:s.fieldName===t.TagUtils.RemoveTagsPseudoRefName?a.filter((e=>n.indexOf(e)<0)):void 0;d&&e.setFieldValueById(i.CoreField.Tags,l(d))}},t.TagUtils.AddTagsPseudoRefName="System.Tags-Add",t.TagUtils.RemoveTagsPseudoRefName="System.Tags-Remove",t.TagUtils.TagSplittingSeparator=/[,;]/,t.TagUtils.splitAndTrimTags=o,t.TagUtils.formatTags=l}(),function(e){async function l(e,t,o){for(const l of o){const n=t.getFieldByName(l.fieldName);if(n){if(n.fieldDefinition.id===i.CoreField.WorkItemType){let a,s,n=t.project.guid;const d=o.find((e=>e.fieldName===i.CoreFieldRefNames.TeamProject));if(d){const i=e.getService("IWorkItemDataManager"),o=e.getService("IWorkItemNodeService"),l=await i.beginGetFieldProjectData(d.value),r=await o.getAreaPathNodes(d.value),u=await o.getIterationNodes(d.value),f=null==l?void 0:l.projects.find((e=>e.guid===d.value));if(!f||!r||!u){console.warn(`Failed to find project data for project ${n}, aborting update of work item type for work item ${t.id}`);continue}s=null==l?void 0:l.fields,n=f.guid,a=Object.assign(Object.assign({},f),{areaNodes:r,iterationNodes:u})}const r=e.getService("IWorkItemTypesService"),u=await r.getWorkItemTypeData(n,[l.value]);t.changeWorkItemType(u[0],a,[],s)}else if((0,a.isEditable)(n)){let e=l.value;if(n.fieldDefinition.id===i.CoreField.History){const a=t.isFieldDirty(i.CoreField.History)?t.getFieldValueById(i.CoreField.History):"";e=`${l.value}${a?"<BR>"+a:""}`}else n.fieldDefinition.type===i.FieldType.DateTime&&l.value&&(e=l.value instanceof Date?l.value:new Date(l.value).toLocaleString());t.setFieldValueById(n.fieldDefinition.id,e)}}else(0,s.processTagsChanges)(t,l)}}t.BulkUpdateUtils={},t.BulkUpdateUtils.performBulkUpdate=async function(e,t,a){var s;if(!t.length)return[];const n=e.getService("IWorkItemModelService"),d=(r=t).length>0&&"number"==typeof r[0]?await n.getWorkItems(t):t;var r;const u=[];for(const t of d){const n=t.getFieldValueById(i.CoreField.WorkItemType),d=null!==(s=a.get(n))&&void 0!==s?s:a.get(o.BulkUpdateConstants.AllTypes);d?u.push(l(e,t,d)):console.warn(`Couldn't find change list for work item ${t.id} with work item type ${n}`)}return await Promise.all(u),d},t.BulkUpdateUtils.getWorkItemTypes=function(e){const t=new Set;for(const a of e)t.add(a[i.CoreFieldRefNames.WorkItemType]);return[...t.values()]}}()}),["BulkUpdateInterfaces","TagUtils","BulkUpdateUtils"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-work-web.bulk-update-utils"}}));