"use strict";define("Test/TestPlansHubRefresh/TestPlansSegment",["require","exports","redux/Utils/ActionHelper","immer","Analytics/Shared/Common/Sources/AnalyticsODataClientBase","Analytics/Common/Utilities/QueryUtilities","react","redux-saga","Test/TestPlansHubRefresh/TestHub/Constants","Test/TestPlansHubRefresh/TestHub/Redux/Suites/SuitesActions","Test/TestPlansHubRefresh/TestHub/Redux/TelemetryActions","Test/TestPlansHubRefresh/TestHub/Redux/TestHubRefresh/TestHubRefreshActions","Test/TestPlansHubRefresh/TestHub/Redux/TestHubRefresh/TestHubRefreshSelector","VSS/Core/Util/String","VSS/Legacy/Legacy","VSS/Platform/Feature","Test/TestPlansHubRefresh/TestHub/Util","Test/TestPlansHubRefresh/TestHub/Redux/TestHubRefresh/TestHubRefreshReducer","Favorites/Star/FavoritesStarButton","react-redux","redux-dynamic-modules","Test/TestPlansHubRefresh/TestHub/Utils/TestPlansHubRefreshLocalContextProvider","VSS/Core/Observable","VSS/Platform/Layout","VSSUI/Button","VSSUI/Dropdown","VSSUI/Header","VSSUI/HeaderCommandBar","VSSUI/List","VSSUI/Observer","VSSUI/Pill","VSSUI/TooltipEx","Test/TestPlansHubRefresh/TestHub/Resources"],(function(e,t,s,a,n,l,i,o,r,c,d,u,p,P,m,f,g,T,S,y,v,h,C,R,I,E,b,A,F,D,_,x,H){var L,w,N,V,M,O,k,U;L=t.Resources={},t.Resources.CopyTestPlan="Copy test plan",t.Resources.AllTestPlans="All test plans",t.Resources.MoreOptions="More Options",t.Resources.IterationDates="Iteration Dates",t.Resources.EditTestPlan="Edit test plan",t.Resources.ViewReport="View report",t.Resources.TestPlanSettings="Test plan settings",t.Resources.ProgressReportRun="{0}% run.",t.Resources.ProgressReportRunPassed="{0}% run, {1}% passed.",t.Resources.NoFavoriteText="Favorited test plans will appear here",t.Resources.PlanLabelPast="Past",t.Resources.PlanLabelCurrent="Current",t.Resources.PlanLabelFuture="Future",t.Resources.IterationDateFormat="{0} {1} - {2} {3}",w=t[U="ReduxTestPlansSegmentActions"]={},t[U].TestPlansSegmentActions={getInitialFavoriteStatusForPlan:e=>(0,s.createAction)("TestPlansSegment/getInitialFavoriteStatusForPlan",{planId:e}),updateFavoriteStatus:(e,t)=>(0,s.createAction)("TestPlansSegment/updateFavoriteStatus",{favoriteStatus:e,favoriteId:t}),onToggleFavorite:(e,t,a,n)=>(0,s.createAction)("TestPlansSegment/onToggleFavorite",{testPlanId:e,testPlanName:t,favoriteStatus:a,favoriteId:n}),fetchFavorites:()=>(0,s.createAction)("TestPlansSegment/fetchFavorites"),updateFavoritePlansList:e=>(0,s.createAction)("TestPlansSegment/updateFavoritePlansList",{favorites:e}),changeTestPlan:e=>(0,s.createAction)("TestPlansSegment/changeTestPlan",{planId:e}),editTestPlan:e=>(0,s.createAction)("TestPlansSegment/editTestPlan",{planId:e}),getTestPlanProgressSummary:e=>(0,s.createAction)("TestPlansSegment/getTestPlanProgressSummary",{planId:e}),updateTestPlanProgressSummary:e=>(0,s.createAction)("TestPlansSegment/updateTestPlanProgressSummary",{testPlanProgressSummary:e}),openProgressReport:e=>(0,s.createAction)("TestPlansSegment/openProgressReport",{planId:e}),openTestPlanSettingsDialog:e=>(0,s.createAction)("TestPlansSegment/openTestPlanSettingsDialog",{planId:e})},t.ReduxTestPlansSegmentContracts={},function(e){N=t[e]={},t[e].TestPlansSegmentReducer=function(e,t){return e=e||{},(0,a.default)(e,(e=>{switch(t.type){case"TestPlansSegment/updateFavoriteStatus":e.isFavorited=t.payload.favoriteStatus,t.payload.favoriteId?e.favoriteId=t.payload.favoriteId:e.favoriteId=void 0;break;case"TestPlansSegment/updateFavoritePlansList":e.favoritePlans=t.payload.favorites;break;case"TestPlansSegment/updateTestPlanProgressSummary":e.testPlanProgressSummary=t.payload.testPlanProgressSummary}}))}}("ReduxTestPlansSegmentReducer"),function(e){V=t[e]={},function(e){e.ArtifactType="Microsoft.TeamFoundation.TestManagement.Plan",e.ArtifactScopeType="Project",e.MarkFavorite="MarkedAsFavorite",e.RemoveFavorite="RemovedAsFavorite"}(t[e].FavoriteConstants||(t[e].FavoriteConstants={})),function(e){e.StartDate="Microsoft.VSTS.Scheduling.StartDate",e.FinishDate="Microsoft.VSTS.Scheduling.FinishDate",e.AreaPath="System.AreaPath",e.IterationPath="System.IterationPath"}(t[e].WorkItemFieldConstants||(t[e].WorkItemFieldConstants={})),function(e){e.ManualTestAnalyticsHubRouteId="ms.vss-test-analytics-web.manualtest-analytics-hub-route",e.EnableNewAnalyticsHubForManualTestFF="WebAccess.TestManagement.EnableNewAnalyticsHubForManualTest",e.TestResultsReportSummaryCommandName="ManualTestAnalytics_TestResultsReportSummary"}(t[e].ProgressReportConstants||(t[e].ProgressReportConstants={})),function(e){e.DATETIME_MINDATE_UTC_MS=-621355968e5,e.Locale="default",e.ShortMonthFormat="short"}(t[e].DateTimeConstants||(t[e].DateTimeConstants={}))}("TestPlansSegmentConstants"),function(e){M=t[e]={};const s="TestPoints",a="TestPlanId";class i extends n.AnalyticsODataClientBase{getTestPlanProgressSummary(e){let t=this._getFilterString(e),a=this._getGroupByStr();const n={entityType:s,project:this._getProjectId(),oDataVersion:l.latestODataVersion};return n.$apply=`${t}/${a}`,this.queryOData(n).then((e=>Promise.resolve(this._createTestPlanProgressSummary(e))))}_getFilterString(e){return`filter(${a} eq ${e})`}_getGroupByStr(){return"aggregate($count as TotalCount, \n        cast(LastResultOutcome eq 'Passed', Edm.Int32) with sum as Passed, \n        cast(LastResultOutcome eq 'None', Edm.Int32) with sum as NotExecuted,\n        cast(LastResultOutcome ne 'None', Edm.Int32) with sum as Executed)/compute(Executed mul 100 div TotalCount as ExecPct,\n        iif(TotalCount gt NotExecuted, Passed mul 100 div Executed,0) as PassedPct)"}_createTestPlanProgressSummary(e){var t={ExecPct:0,PassedPct:0,TotalCount:0};if(!e||!e.value)throw new Error("Data is empty");return e.value.forEach((e=>{t.ExecPct=isNaN(e.ExecPct)?0:e.ExecPct,t.PassedPct=isNaN(e.PassedPct)?0:e.PassedPct,t.TotalCount=e.TotalCount})),t}}t[e].TestPlanResultsSource=i}("UtilsTestPlanResultsSource"),function(e){function*s(e){const t=yield o.effects.getContext("pageContext"),s=yield o.effects.call([t,t.getRestClient],"IFavoriteRestClient");let a=String(e.payload.planId);const n=yield o.effects.call([s,s.getFavoriteByArtifact],V.FavoriteConstants.ArtifactType,a,V.FavoriteConstants.ArtifactScopeType);let l,i=!1;n&&(i=!0,l=n.id),yield o.effects.put(w.TestPlansSegmentActions.updateFavoriteStatus(i,l))}function*a(e){const t=yield o.effects.getContext("pageContext");let s="",a=e.payload.planId;try{if((0,f.isFeatureFlagEnabled)(t,V.ProgressReportConstants.EnableNewAnalyticsHubForManualTestFF,!1)){let e=new M.TestPlanResultsSource(V.ProgressReportConstants.TestResultsReportSummaryCommandName,t),n=yield o.effects.call([e,e.getTestPlanProgressSummary],a);n.TotalCount&&(s=0===n.ExecPct?(0,P.format)(L.ProgressReportRun,n.ExecPct):(0,P.format)(L.ProgressReportRunPassed,n.ExecPct,n.PassedPct))}}catch(e){const t={planId:a,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled),message:e.message,stack:e.stack,error:e};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.NAVIGATE_TO_PROGRESS_REPORT_FROM_TEST_HUB_REFRESH_ERROR,t))}yield o.effects.put(w.TestPlansSegmentActions.updateTestPlanProgressSummary(s))}function*n(e){const t=yield o.effects.getContext("pageContext"),s=yield o.effects.call([t,t.getService],"ITfsPageService"),a=yield o.effects.call([s,s.getData]);let n="";a&&a.project&&(n=a.project.name);const l=yield o.effects.call([t,t.getService],"IVssLocationService"),i={project:n};let c=yield o.effects.call([l,l.routeUrl],V.ProgressReportConstants.ManualTestAnalyticsHubRouteId,i);const u=yield o.effects.call([window,window.open],c,"_blank");u&&(u.opener=null);const P={planId:e.payload.planId,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled)};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.NAVIGATE_TO_PROGRESS_REPORT_FROM_TEST_HUB_REFRESH,P))}function*l(e){const t=yield o.effects.getContext("pageContext"),s=yield o.effects.call([t,t.getService],"ITfsPageService"),a=yield o.effects.call([s,s.getData]),n=yield o.effects.call([t,t.getRestClient],"IFavoriteRestClient");let l=V.FavoriteConstants.MarkFavorite;if(e.payload.favoriteStatus)yield o.effects.call([n,n.deleteFavoriteById],e.payload.favoriteId,V.FavoriteConstants.ArtifactType,V.FavoriteConstants.ArtifactScopeType,a.project.id),yield o.effects.put(w.TestPlansSegmentActions.updateFavoriteStatus(!e.payload.favoriteStatus)),l=V.FavoriteConstants.RemoveFavorite;else{const t={artifactId:String(e.payload.testPlanId),artifactProperties:{},artifactName:e.payload.testPlanName,artifactType:V.FavoriteConstants.ArtifactType,artifactScope:{id:a.project.id,type:V.FavoriteConstants.ArtifactScopeType,name:a.project.name}},s=yield o.effects.call([n,n.createFavorite],t);yield o.effects.put(w.TestPlansSegmentActions.updateFavoriteStatus(!e.payload.favoriteStatus,s.id))}const i={favoriteState:l,planId:e.payload.testPlanId,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled)};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.TOGGLE_FAVORITE,i))}function*T(){const e=yield o.effects.getContext("pageContext"),t=yield o.effects.call([e,e.getService],"ITfsPageService"),s=yield o.effects.call([t,t.getData]),a=yield o.effects.call([e,e.getRestClient],"IFavoriteRestClient"),n=yield o.effects.call([a,a.getFavorites],V.FavoriteConstants.ArtifactType,V.FavoriteConstants.ArtifactScopeType,s.project.id,!0);let l=0;if(n){let e=[];for(let t=0;t<n.length;t++)n[t].artifactIsDeleted||e.push(n[t]);yield o.effects.put(w.TestPlansSegmentActions.updateFavoritePlansList(e)),l=e.length}const i={favoriteCount:l,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled)};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.FETCH_FAVORITE,i))}function*S(e){yield o.effects.put(c.SuitesActions.updateLoadingStatus(!0));const t=yield o.effects.getContext("pageContext");yield o.effects.put(c.SuitesActions.reloadTestPlanAndSuites(e.payload.planId)),yield o.effects.put(c.SuitesActions.updateLoadingStatus(!1));const s=yield o.effects.call([t,t.getRestClient],"IFavoriteRestClient"),a=yield o.effects.call([s,s.getFavoriteByArtifact],V.FavoriteConstants.ArtifactType,e.payload.planId.toString(),V.FavoriteConstants.ArtifactScopeType);yield o.effects.put(w.TestPlansSegmentActions.updateFavoriteStatus(!0,a.id));let n={SelectedPlanId:e.payload.planId.toString()};const l=yield o.effects.call([t,t.getService],"ISettingsService"),i=yield o.effects.call([t,t.getService],"ITfsPageService"),u=yield o.effects.call([i,i.getData]);yield o.effects.call([l,l.setEntries],n,0,"project",u.project.id);const P={newPlanId:e.payload.planId,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled)};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.CHANGE_TEST_PLAN,P))}function*y(e){const t=yield o.effects.call(o.channel),s=yield o.effects.getContext("pageContext"),a=yield o.effects.call([s,s.getService],"IVssContributionService");yield o.effects.call([a,a.getContributionsAsync],["ms.vss-features.ui-responsive-viewport-content","ms.vss-work-web.common-content"]);const n=yield o.effects.call([s,s.getService],"work-item-service");n&&(yield o.effects.call([n,n.openWorkItem],e.payload.planId,{save:s=>{const a=s.getTitle(),n=s.getFieldValue(V.WorkItemFieldConstants.StartDate),l=s.getFieldValue(V.WorkItemFieldConstants.FinishDate),i=s.getFieldValue(V.WorkItemFieldConstants.AreaPath),o=s.getFieldValue(V.WorkItemFieldConstants.IterationPath);t.put({planId:e.payload.planId,testPlanTitle:a,testPlanStartDate:n,testPlanFinishDate:l,testPlanAreaPath:i,testPlanIterationPath:o})}}));const l=yield o.effects.take(t);yield o.effects.put(u.TestHubRefreshActions.updateTestPlan(l.planId,l.testPlanTitle,l.testPlanStartDate,l.testPlanFinishDate,l.testPlanAreaPath,l.testPlanIterationPath))}function*v(e){const t=yield o.effects.call(o.channel),s=yield o.effects.getContext("pageContext");yield o.effects.put(u.TestHubRefreshActions.updateBusyViewStatus(!0));const a=yield o.effects.call([s,s.getService],"ITestHubDataService"),n=yield o.effects.call([a,a.getTestPlanById],e.payload.planId),l=yield o.effects.call([s,s.getService],"IVssLayoutManager");let c={};const P={selectedPlan:n,onSaveCallback:e=>(function(e,t){let s="0",a=0,n=0,l="0";e.buildDefinition&&e.buildDefinition.id&&(l=e.buildDefinition.id);e.build&&e.build.id&&(s=e.build.id);e.releaseEnvironmentDefinition&&e.releaseEnvironmentDefinition.definitionId&&(a=e.releaseEnvironmentDefinition.definitionId);e.releaseEnvironmentDefinition&&e.releaseEnvironmentDefinition.environmentDefinitionId&&(n=e.releaseEnvironmentDefinition.environmentDefinitionId);t.put({selectedBuildId:s,selectedReleaseId:a,selectedReleaseEnvironmentId:n,selectedBuildDefnId:l})}(e,t),c={planId:e.id,testPlanName:e.name,buildDefinition:e.buildDefinition,releaseDefinition:e.releaseEnvironmentDefinition,isAdvancedLicenseEnabled:o.effects.select(p.isAdvancedLicenseEnabled)},o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.CHANGE_TEST_PLAN_SETTINGS,c)))};yield o.effects.call([l,l.renderCallout],(e=>{const t={modules:["TestManagement/Scripts/Shared/TestPlanSettingsDialogProxy"],dependentContributionIds:["ms.vss-releaseManagement-web.release-service-data-external","ms.vss-releaseManagement-web.release-definitions-exists-data-provider"],wrappedType:"testplan-settings-dialog-proxy",wrappedProps:P};return i.createElement(m.LegacyComponent,t)})),yield o.effects.put(u.TestHubRefreshActions.updateBusyViewStatus(!1));const f=yield o.effects.take(t);yield o.effects.put(u.TestHubRefreshActions.updateSelectedBuild(f.selectedBuildId,f.selectedBuildDefnId)),yield o.effects.put(u.TestHubRefreshActions.updateSelectedRelease(f.selectedReleaseId,f.selectedReleaseEnvironmentId));const g={planId:e.payload.planId,isAdvancedLicenseEnabled:yield o.effects.select(p.isAdvancedLicenseEnabled)};yield o.effects.put(d.TelemetryActions.publishTelemetry(r.TelemetryConstants.CLICK_TEST_PLAN_SETTINGS,g))}O=t[e]={},t[e].TestPlansSegmentSaga=function*(){yield o.effects.takeLatest("TestPlansSegment/getInitialFavoriteStatusForPlan",h),yield o.effects.takeLatest("TestPlansSegment/getTestPlanProgressSummary",C),yield o.effects.takeLatest("TestPlansSegment/openProgressReport",R),yield o.effects.takeLatest("TestPlansSegment/onToggleFavorite",I),yield o.effects.takeLatest("TestPlansSegment/fetchFavorites",E),yield o.effects.takeLatest("TestPlansSegment/changeTestPlan",b),yield o.effects.takeLatest("TestPlansSegment/editTestPlan",A),yield o.effects.takeLatest("TestPlansSegment/openTestPlanSettingsDialog",F)},t[e].getInitialFavoriteStatusForPlan=s,t[e].getTestPlanProgressSummary=a,t[e].openProgressReport=n,t[e].onToggleFavorite=l,t[e].fetchFavorites=T,t[e].changeTestPlan=S,t[e].editTestPlan=y,t[e].openTestPlanSettingsDialog=v;const h=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(s,e)})),C=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(a,e)})),R=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(n,e)})),I=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(l,e)})),E=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(T,e)})),b=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(S,e)})),A=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(y,e)})),F=(0,g.errorHandledSaga)((function*(e){yield o.effects.call(v,e)}))}("ReduxTestPlansSegmentSaga"),function(e){k=t[e]={},t[e].TestPlansSegmentModule={id:"testplans-segment",reducerMap:{testPlansSegmentState:N.TestPlansSegmentReducer,testHubRefreshState:T.TestHubRefreshReducer},sagas:[O.TestPlansSegmentSaga]}}("ReduxTestPlansSegmentModule"),function(e){t[e]={};class s extends R.VssComponent{constructor(e,t){super(e),this._onToggleFavorite=()=>{this.props.onToggleFavorite(this.props.testPlanId,this.props.testPlanName,this.props.isFavorited,this.props.favoriteId)},this._onExpandDropdownMenu=()=>{this._items.removeAll(),this._loading.value=!0,this._items.push({id:"loading",type:4}),this.props.fetchFavorites()},this._onTestPlanSelection=e=>{if(!this.props.isInGridView||!this.props.isGridDirty||confirm(H.UnsavedChangesMessage)){if(this.props.testhubRefreshContext){const e=this.props.testhubRefreshContext.getCurrentPivot();if(e){let t;if(0===(0,P.localeIgnoreCaseComparer)(e,r.TestHubRefreshConstants.DEFINE_TAB_ID)?t=r.TelemetryConstants.AUTHOR_PIVOT_PAGE_LOAD_TTI_SCENARIO:0===(0,P.localeIgnoreCaseComparer)(e,r.TestHubRefreshConstants.EXECUTE_TAB_ID)&&(t=r.TelemetryConstants.EXECUTE_PIVOT_PAGE_LOAD_TTI_SCENARIO),t){const e={ttiScenario:r.TelemetryConstants.TESTPLAN_CHANGE_TTI_SCENARIO};this.context.pageContext.getService("IVssPerformanceService").startScenario(t,!0,void 0,e)}}}let t=Number(e);this.props.testPlanId!=t&&(this.props.changeTestPlan(t),this.props.getTestPlanProgressSummary(t))}},this._selection=new F.ListSelection({multiSelect:!1,selectOnFocus:!1}),this._items=new C.ObservableArray,this._loading=new C.ObservableValue(!1),this._onExpandDropdownMenu=this._onExpandDropdownMenu.bind(this),this._showPanel=new C.ObservableValue(!1)}_isMinDate(e){return e.getTime()===V.DateTimeConstants.DATETIME_MINDATE_UTC_MS}_getLocaleDateString(e){return e.toLocaleDateString(V.DateTimeConstants.Locale,{month:V.DateTimeConstants.ShortMonthFormat})}_onTestPlanSettingsSelection(){this.props.openTestPlanSettingsDialog(this.props.testPlanId)}componentDidMount(){this.props.testPlanId&&(this.props.getInitialFavoriteStatusForPlan(this.props.testPlanId),this.props.getTestPlanProgressSummary(this.props.testPlanId))}shouldComponentUpdate(e){if(e.favoritePlans)for(let t=0;t<e.favoritePlans.length;t++)this._items.push({id:e.favoritePlans[t].artifactId,text:e.favoritePlans[t].artifactName});return this._loading.value&&(this._loading.value=!1,this._items.removeAll((e=>4===e.type))),!0}render(){let e={},t=i.createElement(i.Fragment,null),s=-1,a=-1,n="",l="",o="",r={red:233,green:233,blue:233},c="plan-label-text",d="",u=!0;this.props.testPlanStartDate&&this.props.testPlanEndDate&&(this._isMinDate(this.props.testPlanStartDate)||this._isMinDate(this.props.testPlanEndDate)?u=!1:(s=this.props.testPlanStartDate.getDate(),a=this.props.testPlanEndDate.getDate(),n=(0,P.format)(L.IterationDateFormat,this._getLocaleDateString(this.props.testPlanStartDate),s,this._getLocaleDateString(this.props.testPlanEndDate),a))),this.props.testPlanName&&(o=this.props.testPlanName);const p=new Date;return p.setHours(0,0,0,0),this.props.testPlanEndDate<p?l=L.PlanLabelPast:p.setHours(24,60,60,0)&&this.props.testPlanStartDate>p?l=L.PlanLabelFuture:(l=L.PlanLabelCurrent,r={red:0,green:120,blue:215},c="current-plan-label-text"),this._items&&this._items.length?this._items.length>10&&(d="testplan-dropdown-search-enabled"):d="testplan-dropdown-callout-content",this.props.testPlanProgressSummary&&(t=i.createElement("div",{className:"test-plan-progress-report-content"},i.createElement("span",{id:"results-insight"},this.props.testPlanProgressSummary),i.createElement("span",{className:"progress-report-link",onClick:()=>this.props.openProgressReport(this.props.testPlanId)},L.ViewReport))),e=i.createElement("div",{className:"testplans-segment-container"},i.createElement("div",{className:"plan-header title-s","aria-level":1},i.createElement(b.CustomHeader,null,i.createElement(b.HeaderTitleArea,null,i.createElement(b.HeaderTitleRow,null,i.createElement(I.Button,{className:"back-button",iconProps:{iconName:"Back"},href:this.props.mineAllPageUrl,subtle:!0,tooltipProps:{text:L.AllTestPlans},ariaLabel:L.AllTestPlans}),i.createElement(E.Dropdown,{className:"testplan-dropdown-button",ariaLabel:this.props.testPlanName,items:this._items,selection:this._selection,loading:this._loading,onSelect:(e,t)=>this._onTestPlanSelection(t.id),onExpand:this._onExpandDropdownMenu,placeholder:this.props.testPlanName,noItemsText:L.NoFavoriteText,width:300,calloutContentClassName:d,renderExpandable:e=>i.createElement(E.DropdownExpandableButton,Object.assign({tooltipProps:{text:o,overflowOnly:!0}},e))}),i.createElement(S.FavoritesStarButton,{className:"favorite-button",isFavorited:this.props.isFavorited,onToggleFavorite:this._onToggleFavorite})),u?i.createElement(b.HeaderTitleRow,{className:"plan-dates body-s"},i.createElement(x.Tooltip,{text:L.IterationDates},i.createElement("div",null,n)),i.createElement(_.Pill,{variant:2,className:"plan-label",contentClassName:c,excludeTabStop:!0,size:1,color:r},l)):null,i.createElement(b.HeaderTitleRow,{className:"test-plan-progress-report-container body-s"},t)),i.createElement(x.Tooltip,{text:L.MoreOptions},i.createElement("div",null," ",i.createElement(A.HeaderCommandBar,{className:"setting-menu-icon",items:this.getTestPlanCommand()})," "))),i.createElement("div",{className:"separator"}))),i.createElement("div",{className:"test-plan-segment"},i.createElement(v.DynamicModuleLoader,{modules:[k.TestPlansSegmentModule]},e),i.createElement(D.Observer,{showPanel:this._showPanel},(e=>e.showPanel&&i.createElement(R.WrappedComponent,{dependencies:["ms.vss-test-web.testplan-clone-panel"],wrappedType:"clone-test-plan-panel",wrappedProps:{showPanel:this._showPanel}}))))}getTestPlanCommand(){return this.props.isAdvancedLicenseEnabled?[{iconProps:{iconName:"Copy"},id:"CopyPlan",important:!1,onActivate:()=>{const e={planId:this.props.testPlanId,testPlanName:this.props.testPlanName,isAdvancedLicenseEnabled:this.props.isAdvancedLicenseEnabled};this.props.copyTestPlanClicked(r.TelemetryConstants.CLICK_COPY_TEST_PLAN_OPTION,e),this._showPanel.value=!0},text:L.CopyTestPlan},{iconProps:{iconName:"Edit"},id:"EditPlan",important:!1,onActivate:()=>{this.props.editTestPlan(this.props.testPlanId)},text:L.EditTestPlan},{iconProps:{iconName:"Settings"},id:"TestPlanSettings",important:!1,onActivate:()=>{this._onTestPlanSettingsSelection()},text:L.TestPlanSettings}]:[]}}function a(e){const t=i.useContext(h.TestHubRefreshLocalContext);return i.createElement(s,Object.assign({},e,{testhubRefreshContext:t}))}t[e].TestPlansSegmentView=s,t[e].TestPlanSegmentFunctionalComponent=a,t[e].TestPlansSegmentConnectedView=(0,y.connect)((function(e){let t,s,a,n;return e.testPlansSegmentState&&(e.testPlansSegmentState.isFavorited&&(t=e.testPlansSegmentState.isFavorited,s=e.testPlansSegmentState.favoriteId),e.testPlansSegmentState.favoritePlans&&(a=e.testPlansSegmentState.favoritePlans),e.testPlansSegmentState.testPlanProgressSummary&&(n=e.testPlansSegmentState.testPlanProgressSummary)),{testPlanId:e.testHubRefreshState.testPlanId,testPlanName:e.testHubRefreshState.testPlanName,testPlanStartDate:e.testHubRefreshState.testPlanStartDate,testPlanEndDate:e.testHubRefreshState.testPlanEndDate,isAdvancedLicenseEnabled:(0,p.isAdvancedLicenseEnabled)(e),mineAllPageUrl:e.testHubRefreshState.mineAllPageUrl,isFavorited:t,favoriteId:s,favoritePlans:a,testPlanProgressSummary:n,isInGridView:e.testHubRefreshState.isInGridView,isGridDirty:e.testHubRefreshState.isGridDirty}}),(function(e){return{getInitialFavoriteStatusForPlan:t=>e(w.TestPlansSegmentActions.getInitialFavoriteStatusForPlan(t)),onToggleFavorite:(t,s,a,n)=>e(w.TestPlansSegmentActions.onToggleFavorite(t,s,a,n)),fetchFavorites:()=>e(w.TestPlansSegmentActions.fetchFavorites()),changeTestPlan:t=>e(w.TestPlansSegmentActions.changeTestPlan(t)),updateLoadingStatus:t=>e(c.SuitesActions.updateLoadingStatus(t)),copyTestPlanClicked:(t,s)=>e(d.TelemetryActions.publishTelemetry(t,s)),editTestPlan:t=>e(w.TestPlansSegmentActions.editTestPlan(t)),getTestPlanProgressSummary:t=>e(w.TestPlansSegmentActions.getTestPlanProgressSummary(t)),openProgressReport:t=>e(w.TestPlansSegmentActions.openProgressReport(t)),openTestPlanSettingsDialog:t=>e(w.TestPlansSegmentActions.openTestPlanSettingsDialog(t))}}))(a),R.VssComponent.register("testplans-segment-component",t[e].TestPlansSegmentConnectedView)}("ComponentTestPlansSegmentConnectedView")}),["Resources","Redux/TestPlansSegmentActions","Redux/TestPlansSegmentContracts","Redux/TestPlansSegmentReducer","TestPlansSegmentConstants","Utils/TestPlanResultsSource","Redux/TestPlansSegmentSaga","Redux/TestPlansSegmentModule","Component/TestPlansSegmentConnectedView"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-test-web.testplans-segment"}}));